import serial
import numpy as np
import argparse
import cv2 as cv
import subprocess
import time
import os
from yolo_utils import infer_image, show_image

# Serial port for Arduino communication
ArduinoSerial = serial.Serial('COM3', 9600)  # Update 'COM5' with your actual Arduino port

FLAGS = []
if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('-m', '--model-path',
                        type=str,
                        default='C:/Users/jjomo/Desktop/Internship 2024/yolov3-coco/',
                        help='The directory where the model weights and \
                              configuration files are.')

    parser.add_argument('-w', '--weights',
                        type=str,
                        default='C:/Users/jjomo/Desktop/Internship 2024/yolov3-coco/yolov3.weights',
                        help='Path to the file which contains the weights \
                              for YOLOv3.')

    parser.add_argument('-cfg', '--config',
                        type=str,
                        default='C:/Users/jjomo/Desktop/Internship 2024/yolov3-coco/yolov3.cfg',
                        help='Path to the configuration file for the YOLOv3 model.')

    parser.add_argument('-l', '--labels',
                        type=str,
                        default='C:/Users/jjomo/Desktop/Internship 2024/yolov3-coco/coco-labels',
                        help='Path to the file having the \
                              labels in a new-line separated way.')

    parser.add_argument('-c', '--confidence',
                        type=float,
                        default=0.5,
                        help='The model will reject boundaries which has a \
                              probability less than the confidence value. \
                              default: 0.5')

    parser.add_argument('-th', '--threshold',
                        type=float,
                        default=0.3,
                        help='The threshold to use when applying the \
                              Non-Max Suppression')

    parser.add_argument('--download-model',
                        type=bool,
                        default=False,
                        help='Set to True, if the model weights and configurations \
                              are not present on your local machine.')

    parser.add_argument('-t', '--show-time',
                        type=bool,
                        default=False,
                        help='Show the time taken to infer each image.')

    FLAGS, unparsed = parser.parse_known_args()

    if FLAGS.download_model:
        subprocess.call(['C:/Users/jjomo/Desktop/Internship 2024/yolov3-coco/get_model.sh'])

    # Load labels, colors, and YOLO model
    labels = open(FLAGS.labels).read().strip().split('\n')
    colors = np.random.randint(0, 255, size=(len(labels), 3), dtype='uint8')
    net = cv.dnn.readNetFromDarknet(FLAGS.config, FLAGS.weights)
    layer_names = net.getLayerNames()

    # Try to handle the case where getUnconnectedOutLayers() returns a scalar
    try:
        unconnected_layers = net.getUnconnectedOutLayers().flatten()
        layer_names = [layer_names[i - 1] for i in unconnected_layers]
    except AttributeError:
        # Fallback in case of an unexpected return value
        layer_names = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

    print('Starting Inference on Webcam')

    # Capture video from webcam
    vid = cv.VideoCapture(1)  # 0 for default webcam

    while True:
        _, frame = vid.read()
        height, width = frame.shape[:2]

        # Perform inference using YOLO
        frame, boxes, confidences, classids, idxs = infer_image(net, layer_names, \
                                                                height, width, frame, colors, labels, FLAGS)

        # Find the smallest detected object
        if len(boxes) > 0:
            min_area = float('inf')  # Start with a very large value
            min_index = 0
            for i in range(len(boxes)):
                box = boxes[i]
                area = box[2] * box[3]  # Calculate area (width * height)
                if area < min_area:
                    min_area = area
                    min_index = i

            # Get the coordinates of the smallest object
            x, y, w, h = boxes[min_index]
            centerX = x + w // 2
            centerY = y + h // 2

            # Calculate the error relative to the center of the frame
            error_x = centerX - width // 2
            error_y = centerY - height // 2

            # Send the error values to the Arduino
            ArduinoSerial.write(f"{error_x},{error_y}\n".encode('utf-8'))

        # Show the video feed with bounding boxes
        cv.imshow('webcam', frame)

        if cv.waitKey(1) & 0xFF == ord('q'):  # Press 'q' to quit
            break

    vid.release()
    cv.destroyAllWindows()
